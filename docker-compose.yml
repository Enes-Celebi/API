services:
  db:
    image: postgres:16-alpine
    container_name: fm-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432" 
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h 127.0.0.1"]
      interval: 2s
      timeout: 2s
      retries: 30

  migrate:
    build: { context: ., dockerfile: Dockerfile }
    image: fm/api:latest
    container_name: fm-migrate
    env_file: [ .env.docker ]
    depends_on:
      db:
        condition: service_healthy
    command: [ "npx", "prisma", "migrate", "deploy" ]
    restart: "no"

  api:
    build: { context: ., dockerfile: Dockerfile }
    image: fm/api:latest
    container_name: fm-api
    env_file: [ .env.docker ]
    depends_on:
      migrate:
        condition: service_completed_successfully
    ports:
      - "4000:4000"
    command: [ "node", "dist/server.js" ]
    restart: unless-stopped

  worker:
    build: { context: ., dockerfile: Dockerfile }
    image: fm/api:latest
    container_name: fm-worker
    env_file: [ .env.docker ]
    depends_on:
      migrate:
        condition: service_completed_successfully
    command: [ "node", "dist/workers/team.worker.js" ]
    restart: unless-stopped

volumes:
  db_data:
